/**
 * MIT License.
 */
package com.soft9000.ICell;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;

/**
 * A Graphical Server that can be either (1) dropped onto a JFrame (NetBeans,
 * etc.) or (2) custom created for use using youe own client & metrics.
 *
 * @author Randall Nagy
 */
public class JPanCellGrid extends javax.swing.JPanel implements IGridServer {

    BufferedImage img = null;
    private IGridClient set = null;
    private CellSlicer slicer;
    private CellEnumerator zenum;

    /**
     * Creates new form JPanCellGrid
     *
     */
    public JPanCellGrid() {
        this(new BlankCellSet(), new CellSlicer(15, 15));

    }

    public JPanCellGrid(IGridClient set, CellSlicer slicer) {
        this.set = set;
        this.slicer = slicer;
        set.onRegister(this);
        initComponents();
    }

    /**
     * NULL parameters are okay.
     *
     * @param set
     * @param slicer
     */
    public void assign(IGridClient set, CellSlicer slicer) {
        if (set != null) {
            this.set = set;
        }
        if (slicer != null) {
            this.slicer = slicer;
        }
        img = null;
        this.repaint();
    }

    @Override
    public void update(Graphics gr) {
        paint(gr);
    }

    @Override
    public void paint(Graphics gr) {
        if (img == null) {
            newImage();
        }
        if (zenum.drawAll(img, set) == false) {
            img = null; // possibilites 
            this.repaint();
        } else {
            gr.drawImage(img, 0, 0, this);
        }
    }

    private void newImage() {
        if (img == null) {
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize(); // possibilites 
            img = new BufferedImage(dim.width + 1, dim.height + 1, BufferedImage.TYPE_INT_ARGB);
            zenum = new CellEnumerator(this.getSize(), slicer);
        }
        Dimension dim = this.getSize();
        Graphics igr = img.getGraphics();
        igr.fillRect(0, 0, dim.width, dim.height);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(java.awt.Color.white);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 675, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        System.out.println("Click: " + evt.getPoint().toString());
        CellImage cell = locate(evt.getPoint());
        if (cell != null) {
            System.out.println("Located");
            set.onClicked(cell);
            this.getGraphics().drawImage(img, 0, 0, this);
        } else {
            System.out.println("Not Located");
        }
    }//GEN-LAST:event_formMouseClicked

    private CellImage locate(Point point) {
        if (img == null) {
            newImage();
        }

        CellImage info = zenum.findCell(img, point);
        if (info != null) {
            return info;
        }
        img = null; // possibilites 
        this.repaint();
        return null;
    }

    @Override
    public void update(ICellShape mode) {
        // TODO: Implement tracking / mouse shape "ghosting."        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
